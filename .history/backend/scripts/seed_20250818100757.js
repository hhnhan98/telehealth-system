const mongoose = require('mongoose');
const bcrypt = require('bcrypt');
require('dotenv').config();

const User = require('../models/User');
const Doctor = require('../models/Doctor');
const Patient = require('../models/Patient');
const Specialty = require('../models/Specialty');
const Location = require('../models/Location');
const Appointment = require('../models/Appointment');

const seed = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ MongoDB connected for seeding...');

    // X√≥a d·ªØ li·ªáu c≈©
    await Promise.all([
      User.deleteMany({}),
      Doctor.deleteMany({}),
      Patient.deleteMany({}),
      Specialty.deleteMany({}),
      Location.deleteMany({}),
      Appointment.deleteMany({})
    ]);

    // Password m·∫∑c ƒë·ªãnh
    const hashedPassword = await bcrypt.hash('123456', 10);

    // T·∫°o 3 c∆° s·ªü y t·∫ø
    const locations = await Location.insertMany([
      { name: 'C∆° s·ªü 1 - H√† N·ªôi', address: '123 ƒê∆∞·ªùng A, H√† N·ªôi' },
      { name: 'C∆° s·ªü 2 - ƒê√† N·∫µng', address: '456 ƒê∆∞·ªùng B, ƒê√† N·∫µng' },
      { name: 'C∆° s·ªü 3 - TP.HCM', address: '789 ƒê∆∞·ªùng C, TP.HCM' }
    ]);

    // M·ªói c∆° s·ªü 3 chuy√™n khoa
    const specialtyNames = ['N·ªôi t·ªïng qu√°t', 'Nhi khoa', 'Tim m·∫°ch'];
    let specialties = [];

    for (let loc of locations) {
      for (let name of specialtyNames) {
        const sp = await Specialty.create({ name, location: loc._id });
        specialties.push(sp);
      }
    }

    // T·∫°o b√°c sƒ© (m·ªói chuy√™n khoa 1 b√°c sƒ©)
    let doctors = [];
    for (let i = 0; i < specialties.length; i++) {
      const user = await User.create({
        fullName: `B√°c sƒ© ${specialties[i].name} ${i + 1}`,
        email: `doctor${i + 1}@example.com`,
        password: hashedPassword,
        role: 'doctor'
      });

      const doctor = await Doctor.create({
        user: user._id,
        specialty: specialties[i]._id,
        location: specialties[i].location,
        bio: `B√°c sƒ© chuy√™n khoa ${specialties[i].name} v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám`
      });

      doctors.push(doctor);
    }

    // T·∫°o b·ªánh nh√¢n
    let patients = [];
    for (let i = 1; i <= 5; i++) {
      const user = await User.create({
        fullName: `B·ªánh nh√¢n ${i}`,
        email: `patient${i}@example.com`,
        password: hashedPassword,
        role: 'patient'
      });

      const patient = await Patient.create({
        user: user._id,
        dateOfBirth: new Date(1990, i, i + 5),
        gender: i % 2 === 0 ? 'male' : 'female'
      });

      patients.push(patient);
    }

    // Ng√†y tham chi·∫øu
    const today = new Date('2025-08-18T09:00:00');

    // T·∫°o l·ªãch h·∫πn cho b·ªánh nh√¢n (c√≥ ƒë·ªß pending, confirmed, completed)
    let statuses = ['pending', 'confirmed', 'completed'];
    for (let i = 0; i < patients.length; i++) {
      for (let j = 0; j < statuses.length; j++) {
        const appointmentDate = new Date(today);
        appointmentDate.setDate(today.getDate() + (i - 2)); // tr·ª´/c·ªông quanh h√¥m nay
        appointmentDate.setHours(8 + j * 2); // 8h, 10h, 12h

        await Appointment.create({
          patient: patients[i]._id,
          doctor: doctors[(i + j) % doctors.length]._id,
          date: appointmentDate,
          status: statuses[j],
          reason: `Kh√°m ${statuses[j]} - b·ªánh nh√¢n ${i + 1}`
        });
      }
    }

    console.log('üéâ Seeding completed successfully!');
    process.exit(0);
  } catch (err) {
    console.error('‚ùå Seeding error:', err);
    process.exit(1);
  }
};

seed();
