const Schedule = require('../models/Schedule');

// üìå L·∫•y l·ªãch r·∫£nh c·ªßa b√°c sƒ© theo ng√†y
exports.getDoctorScheduleByDate = async (req, res) => {
  const { doctorId } = req.params;
  const { date } = req.query;

  if (!doctorId || !date) {
    return res.status(400).json({ error: 'Thi·∫øu doctorId ho·∫∑c date' });
  }

  try {
    const schedule = await Schedule.findOne({
      doctor: doctorId,
      date: new Date(date),
    });

    if (!schedule) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªãch r·∫£nh' });
    }

    res.json(schedule);
  } catch (error) {
    console.error('L·ªói khi l·∫•y l·ªãch:', error);
    res.status(500).json({ error: 'L·ªói m√°y ch·ªß' });
  }
};

// üìå T·∫°o l·ªãch r·∫£nh m·ªõi
exports.createSchedule = async (req, res) => {
  const { doctor, date, timeSlots } = req.body;

  if (!doctor || !date || !timeSlots || !Array.isArray(timeSlots)) {
    return res.status(400).json({ error: 'Thi·∫øu th√¥ng tin ho·∫∑c sai ƒë·ªãnh d·∫°ng' });
  }

  try {
    const existing = await Schedule.findOne({ doctor, date: new Date(date) });
    if (existing) {
      return res.status(400).json({ error: 'L·ªãch ƒë√£ t·ªìn t·∫°i cho ng√†y n√†y' });
    }

    const schedule = new Schedule({ doctor, date: new Date(date), timeSlots });
    await schedule.save();

    res.status(201).json(schedule);
  } catch (error) {
    console.error('L·ªói khi t·∫°o l·ªãch:', error);
    res.status(500).json({ error: 'L·ªói m√°y ch·ªß' });
  }
};

// üìå C·∫≠p nh·∫≠t l·ªãch r·∫£nh
exports.updateSchedule = async (req, res) => {
  const { id } = req.params;
  const { date, timeSlots } = req.body;

  try {
    const schedule = await Schedule.findById(id);

    if (!schedule) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y l·ªãch' });
    }

    if (date) schedule.date = new Date(date);
    if (Array.isArray(timeSlots)) schedule.timeSlots = timeSlots;

    await schedule.save();

    res.json(schedule);
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t l·ªãch:', error);
    res.status(500).json({ error: 'L·ªói m√°y ch·ªß' });
  }
};

// üìå Xo√° l·ªãch r·∫£nh
exports.deleteSchedule = async (req, res) => {
  const { id } = req.params;

  try {
    const deleted = await Schedule.findByIdAndDelete(id);

    if (!deleted) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y l·ªãch' });
    }

    res.json({ message: 'Xo√° l·ªãch th√†nh c√¥ng' });
  } catch (error) {
    console.error('L·ªói khi xo√° l·ªãch:', error);
    res.status(500).json({ error: 'L·ªói m√°y ch·ªß' });
  }
};
